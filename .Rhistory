covid_data_deaths <- read_csv ("data/COVID-19 data from John Hopkins University/CONVENIENT_global_deaths.csv")
vaccination_data <- read_csv ("data/COVID-19 World Vaccination Progress/country_vaccinations.csv")
Gov_response <- read_csv ("data/COVID-19 Government Response Tracker.csv")
colnames(vaccination_data)
# Assuming the country names are the same in both datasets
# Filter and analyze vaccination data
vaccination_data_filtered <- vaccination_data %>%
select(country, total_vaccinations) %>%
filter(!is.na(total_vaccinations))
# Filter and analyze COVID-19 case data (assuming total cases column exists)
covid_data_cases_filtered <- covid_data_cases %>%
select(country, confirmed_cases) %>%
filter(!is.na(confirmed_cases))
# Correct way to use select() with a column name
data %>% select(all_of(country))
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
covid_data_cases <- read_csv ("data/COVID-19 data from John Hopkins University/CONVENIENT_global_confirmed_cases.csv")
covid_data_deaths <- read_csv ("data/COVID-19 data from John Hopkins University/CONVENIENT_global_deaths.csv")
vaccination_data <- read_csv ("data/COVID-19 World Vaccination Progress/country_vaccinations.csv")
Gov_response <- read_csv ("data/COVID-19 Government Response Tracker.csv")
# Correct way to use select() with a column name
data %>% select(all_of(country))
str(covid_data_cases)
str(covid_data_deaths)
str(vaccination_data)
# Function to analyze correlation and create visualizations for Question 1
analyze_vaccination_vs_cases_deaths <- function(vaccination_data, covid_data_cases, covid_data_deaths) {
# Merge vaccination data with covid cases data by country
merged_cases <- merge(vaccination_data, covid_data_cases, by = "country")
merged_deaths <- merge(vaccination_data, covid_data_deaths, by = "country")
# Check the first few rows of the merged data
head(merged_cases)
# Scatter plot: Vaccination Rate vs Confirmed Cases
ggplot(merged_cases, aes(x = total_vaccinations, y = confirmed_cases)) +
geom_point() +
labs(title = "Vaccination Rate vs Confirmed COVID-19 Cases",
x = "Total Vaccinations", y = "Confirmed COVID-19 Cases") +
theme_minimal()
# Scatter plot: Vaccination Rate vs Deaths
ggplot(merged_deaths, aes(x = total_vaccinations, y = deaths)) +
geom_point() +
labs(title = "Vaccination Rate vs COVID-19 Deaths",
x = "Total Vaccinations", y = "COVID-19 Deaths") +
theme_minimal()
# Calculate Correlation: Vaccination Rate vs Confirmed Cases
correlation_cases <- cor(merged_cases$total_vaccinations, merged_cases$confirmed_cases, use = "complete.obs")
print(paste("Correlation between vaccination rate and confirmed cases: ", correlation_cases))
# Calculate Correlation: Vaccination Rate vs Deaths
correlation_deaths <- cor(merged_deaths$total_vaccinations, merged_deaths$deaths, use = "complete.obs")
print(paste("Correlation between vaccination rate and deaths: ", correlation_deaths))
}
# Run the function with your datasets
analyze_vaccination_vs_cases_deaths(vaccination_data, covid_data_cases, covid_data_deaths)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
covid_data_cases <- read_csv ("data/COVID-19 data from John Hopkins University/CONVENIENT_global_confirmed_cases.csv")
covid_data_deaths <- read_csv ("data/COVID-19 data from John Hopkins University/CONVENIENT_global_deaths.csv")
vaccination_data <- read_csv ("data/COVID-19 World Vaccination Progress/country_vaccinations.csv")
Gov_response <- read_csv ("data/COVID-19 Government Response Tracker.csv")
# Function to analyze correlation and create visualizations for Question 1
analyze_vaccination_vs_cases_deaths <- function(vaccination_data, covid_data_cases, covid_data_deaths) {
# Merge vaccination data with covid cases data by country
merged_cases <- merge(vaccination_data, covid_data_cases, by = "country")
merged_deaths <- merge(vaccination_data, covid_data_deaths, by = "country")
# Check the first few rows of the merged data
head(merged_cases)
# Scatter plot: Vaccination Rate vs Confirmed Cases
ggplot(merged_cases, aes(x = total_vaccinations, y = confirmed_cases)) +
geom_point() +
labs(title = "Vaccination Rate vs Confirmed COVID-19 Cases",
x = "Total Vaccinations", y = "Confirmed COVID-19 Cases") +
theme_minimal()
# Scatter plot: Vaccination Rate vs Deaths
ggplot(merged_deaths, aes(x = total_vaccinations, y = deaths)) +
geom_point() +
labs(title = "Vaccination Rate vs COVID-19 Deaths",
x = "Total Vaccinations", y = "COVID-19 Deaths") +
theme_minimal()
# Calculate Correlation: Vaccination Rate vs Confirmed Cases
correlation_cases <- cor(merged_cases$total_vaccinations, merged_cases$confirmed_cases, use = "complete.obs")
print(paste("Correlation between vaccination rate and confirmed cases: ", correlation_cases))
# Calculate Correlation: Vaccination Rate vs Deaths
correlation_deaths <- cor(merged_deaths$total_vaccinations, merged_deaths$deaths, use = "complete.obs")
print(paste("Correlation between vaccination rate and deaths: ", correlation_deaths))
}
# Run the function with your datasets
analyze_vaccination_vs_cases_deaths(vaccination_data, covid_data_cases, covid_data_deaths)
# Check column names in each dataset
colnames(vaccination_data)
colnames(covid_data_cases)
colnames(covid_data_deaths)
# Check column names in each dataset
colnames(vaccination_data)
colnames(covid_data_cases)
vaccination_data$country <- as.character(vaccination_data$country)
vaccination_data$country <- as.character(vaccination_data$country)
merged_cases <- merge(vaccination_data, covid_data_cases, by="country")
vaccination_data$country <- as.character(vaccination_data$country)
colnames(covid_data_cases)[colnames(covid_data_cases) == "Country/Region"] <- "country"
colnames(covid_data_deaths)[colnames(covid_data_deaths) == "Country/Region"] <- "country"
merged_cases <- merge(vaccination_data, covid_data_cases, by="country")
merged_deaths <- merge(vaccination_data, covid_data_deaths, by="country")
ggplot(merged_cases, aes(x = total_vaccinations, y = confirmed_cases)) +
geom_point() +
labs(title = "Vaccination Rate vs Confirmed COVID-19 Cases",
x = "Total Vaccinations", y = "Confirmed COVID-19 Cases") +
theme_minimal()
colnames(merged_cases)
colnames(merged_deaths)
australia_columns <- colnames(covid_data_cases)[grepl("Australia", colnames(covid_data_cases))]
covid_data_cases[, australia_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
covid_data_cases$Australia <- rowSums(covid_data_cases[, australia_columns], na.rm = TRUE)
covid_data_cases <- covid_data_cases[, !grepl("Australia", colnames(covid_data_cases))]
head(covid_data_cases)
australia_columns <- colnames(covid_data_cases)[grepl("Australia", colnames(covid_data_cases))]
covid_data_cases[, australia_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
covid_data_cases$Australia <- rowSums(covid_data_cases[, australia_columns], na.rm = TRUE)
head(covid_data_cases)
australia_columns <- colnames(covid_data_cases)[grepl("Australia", colnames(covid_data_cases))]
covid_data_cases[, australia_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
covid_data_cases$Australia <- rowSums(covid_data_cases[, australia_columns], na.rm = TRUE)
australia_columns <- colnames(covid_data_cases)[grepl("Canada", colnames(covid_data_cases))]
covid_data_cases[, canada_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
australia_columns <- colnames(covid_data_cases)[grepl("Australia", colnames(covid_data_cases))]
covid_data_cases[, australia_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
covid_data_cases$Australia <- rowSums(covid_data_cases[, australia_columns], na.rm = TRUE)
australia_columns <- colnames(covid_data_cases)[grepl("Canada", colnames(covid_data_cases))]
covid_data_cases[, Canada_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
australia_columns <- colnames(covid_data_cases)[grepl("Australia", colnames(covid_data_cases))]
covid_data_cases[, australia_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
covid_data_cases$Australia <- rowSums(covid_data_cases[, australia_columns], na.rm = TRUE)
australia_columns <- colnames(covid_data_cases)[grepl("Canada", colnames(covid_data_cases))]
covid_data_cases[, canada_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
australia_columns <- colnames(covid_data_cases)[grepl("Australia", colnames(covid_data_cases))]
covid_data_cases[, australia_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
covid_data_cases$Australia <- rowSums(covid_data_cases[, australia_columns], na.rm = TRUE)
canada_columns <- colnames(covid_data_cases)[grepl("Canada", colnames(covid_data_cases))]
covid_data_cases[, canada_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
covid_data_cases$Canada <- rowSums(covid_data_cases[, canada_columns], na.rm = TRUE)
head(covid_data_cases)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
covid_data_cases <- read_csv ("data/COVID-19 data from John Hopkins University/CONVENIENT_global_confirmed_cases.csv")
covid_data_deaths <- read_csv ("data/COVID-19 data from John Hopkins University/CONVENIENT_global_deaths.csv")
vaccination_data <- read_csv ("data/COVID-19 World Vaccination Progress/country_vaccinations.csv")
Gov_response <- read_csv ("data/COVID-19 Government Response Tracker.csv")
australia_columns <- colnames(covid_data_cases)[grepl("Australia", colnames(covid_data_cases))]
covid_data_cases[, australia_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
covid_data_cases$Australia <- rowSums(covid_data_cases[, australia_columns], na.rm = TRUE)
canada_columns <- colnames(covid_data_cases)[grepl("Canada", colnames(covid_data_cases))]
covid_data_cases[, canada_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
australia_columns <- colnames(covid_data_cases)[grepl("Australia", colnames(covid_data_cases))]
covid_data_cases[, australia_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
covid_data_cases$Australia <- rowSums(covid_data_cases[, australia_columns], na.rm = TRUE)
canada_columns <- colnames(covid_data_cases)[grepl("Canada", colnames(covid_data_cases))]
covid_data_cases[, canada_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
australia_columns <- colnames(covid_data_cases)[grepl("Australia", colnames(covid_data_cases))]
covid_data_cases[, australia_columns] <- sapply(covid_data_cases[, australia_columns], as.numeric)
covid_data_cases$Australia <- rowSums(covid_data_cases[, australia_columns], na.rm = TRUE)
canada_columns <- colnames(covid_data_cases)[grepl("Canada", colnames(covid_data_cases))]
covid_data_cases[, canada_columns] <- sapply(covid_data_cases[, canada_columns], as.numeric)
covid_data_cases$Canada <- rowSums(covid_data_cases[, canada_columns], na.rm = TRUE)
head(covid_data_cases)
# List of countries to merge (countries with multiple regions)
countries_to_merge <- c("Australia", "Canada", "China", "United Kingdom")
# Loop through each country and merge its regional columns
for (country in countries_to_merge) {
# Find all columns related to the country (including the regions like "Australia...11", "Canada...42")
country_columns <- colnames(covid_data_cases)[grepl(country, colnames(covid_data_cases))]
# Convert those columns to numeric (if they are not already numeric)
covid_data_cases[, country_columns] <- sapply(covid_data_cases[, country_columns], as.numeric)
# Sum the values for each country (across the rows) and store in a new column named after the country
covid_data_cases[[country]] <- rowSums(covid_data_cases[, country_columns], na.rm = TRUE)
# Remove the individual country-related columns (but keep the merged country column)
covid_data_cases <- covid_data_cases[, !(grepl(country, colnames(covid_data_cases)) & !grepl(paste0("^", country), colnames(covid_data_cases)))]
}
# Check the result to ensure the merged "Australia" column is retained
head(covid_data_cases)
country_name <- "Australia"
country_name <- "Australia"
vaccination_data_filtered <- vaccination_data %>%
filter(country == country_name) %>%
select(total_vaccinations)
covid_data_cases_filtered <- covid_data_cases %>%
filter(country == country_name) %>%
select(confirmed_cases)
country_name <- "Indonesia"
vaccination_data_filtered <- vaccination_data %>%
filter(country == country_name) %>%
select(total_vaccinations)
covid_data_cases_filtered <- Indonesia %>%
filter(country == country_name) %>%
select(confirmed_cases)
vaccination_data_indonesia <- vaccination_data %>%
filter(country == "Indonesia") %>%
select(total_vaccinations)
vaccination_data_indonesia <- vaccination_data %>%
filter(country == "Indonesia") %>%
select(total_vaccinations)
covid_data_cases_indonesia <- covid_data_cases %>%
filter(country == "Indonesia") %>%
select(confirmed_cases)
colnames(covid_data_cases)
indonesia_cases <- covid_data_cases[, "Indonesia"]
# Filter vaccination data for Indonesia
vaccination_data_indonesia <- vaccination_data %>%
filter(country == "Indonesia") %>%
select(total_vaccinations)
# Check the data
head(indonesia_cases)
head(vaccination_data_indonesia)
indonesia_cases <- covid_data_cases[, "Indonesia"]
vaccination_data_indonesia <- vaccination_data %>%
filter(country == "Indonesia") %>%
select(total_vaccinations)
ggplot(data = data.frame(vaccination_data_indonesia, indonesia_cases),
aes(x = total_vaccinations, y = indonesia_cases)) +
geom_point() +
labs(title = "Indonesia: Vaccination Rate vs Confirmed COVID-19 Cases",
x = "Total Vaccinations", y = "Confirmed Cases") +
theme_minimal()
vaccination_data_indonesia$date <- as.Date(vaccination_data_indonesia$date)
indonesia_cases <- covid_data_cases[, "Indonesia"]
# Filter Indonesia data from the vaccination dataset
vaccination_data_indonesia <- vaccination_data %>%
filter(country == "Indonesia") %>%
select(total_vaccinations)
# Check the filtered data (optional)
head(indonesia_cases)
head(vaccination_data_indonesia)
ggplot(data = data.frame(vaccination_data_indonesia, indonesia_cases),
aes(x = total_vaccinations, y = indonesia_cases)) +
geom_point() +
labs(title = "Indonesia: Vaccination Rate vs Confirmed COVID-19 Cases",
x = "Total Vaccinations", y = "Confirmed Cases") +
theme_minimal()
indonesia_cases <- covid_data_cases[, "Indonesia"]
vaccination_data_indonesia <- vaccination_data %>%
filter(country == "Indonesia") %>%
select(total_vaccinations)
ggplot(data = data.frame(vaccination_data_indonesia, indonesia_cases),
aes(x = total_vaccinations, y = indonesia_cases)) +
geom_point() +
labs(title = "Indonesia: Vaccination Rate vs Confirmed COVID-19 Cases",
x = "Total Vaccinations", y = "Confirmed Cases") +
theme_minimal()
# Convert dates to Date format (if not already)
vaccination_data_indonesia$date <- as.Date(vaccination_data_indonesia$date)
# Convert dates to Date format (if not already)
vaccination_data_indonesia$date <- as.Date(vaccination_data_indonesia$date)
indonesia_cases <- covid_data_cases[, "Indonesia"]
vaccination_data_indonesia <- vaccination_data %>%
filter(country == "Indonesia") %>%
select(total_vaccinations)
# Convert dates to Date format (if not already)
vaccination_data_indonesia$date <- as.Date(vaccination_data_indonesia$date)
government_data_indonesia <- government_data %>%
filter(country == "Indonesia") %>%
select(country, government_response_index)
government_data_indonesia <- Gov_response %>%
filter(country == "Indonesia") %>%
select(country, government_response_index)
colnames(Gov_response)
head(government_data)
head(Gov_response)
head(Gov_response)
# Rename the 'CountryName' column to 'country' if needed
colnames(government_data)[colnames(government_data) == "CountryName"] <- "country"
government_data_indonesia <- government_data %>%
filter(country == "Indonesia") %>%
select(country, StringencyIndex)
government_data_indonesia <- Gov_response %>%
filter(country == "Indonesia") %>%
select(country, StringencyIndex)
data <- read.csv("Admission_Predict.csv")
data <- read.csv(""data/Admission_Predict.csv")
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
data <- read.csv(""data/Admission_Predict.csv")
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
data <- read.csv("data/Admission_Predict.csv")
government_data_indonesia <- Gov_response %>%
filter(country == "Indonesia") %>%
select(country, government_response_index)
data <- read.csv("data/Admission_Predict.csv")
head(data)
library(DT)
install.packages(DT)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(DT)
install.packages("DT")
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(DT)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(DT)
data <- read.csv("data/Admission_Predict.csv")
head(data)
datatable(data)
government_data_indonesia <- Gov_response %>%
filter(country == "Indonesia") %>%
select(country, government_response_index)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(DT)
library(corrplot)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(DT)
library(corrplot)
installed.packages("corrplot")
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(DT)
library(corrplot)
install.packages("corrplot")
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(DT)
library(corrplot)
installed.packages("corrplot")
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(DT)
library(corrplot)
data <- read.csv("data/Admission_Predict.csv")
head(data)
datatable(data)
government_data_indonesia <- Gov_response %>%
filter(country == "Indonesia") %>%
select(country, government_response_index)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(DT)
library(corrplot)
corrplot(cor_data, method = "circle")
cor_data <- cor(data[,c("GRE.Score", "TOEFL.Score", "University.Rating", "SOP", "LOR", "CGPA", "Research", "Chance.of.Admit")])
print(cor_data)
# Scatter plot showing GRE Score vs Chance of Admit
ggplot(data, aes(x = GRE.Score, y = Chance.of.Admit)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
ggtitle("GRE Score vs Chance of Admit") +
xlab("GRE Score") +
ylab("Chance of Admit")
# Bar plot for Research Experience vs Chance of Admit
ggplot(data, aes(x = factor(Research), y = Chance.of.Admit)) +
geom_bar(stat = "summary", fun = "mean", fill = "steelblue") +
ggtitle("Research Experience vs Chance of Admit") +
xlab("Research Experience (1 = Yes, 0 = No)") +
ylab("Average Chance of Admit")
# Applying Linear Regression to predict Chance of Admit
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research, data = data)
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research, data = data)
summary(model)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(DT)
library(corrplot)
data <- read.csv("data/Admission_Predict.csv")
head(data)
datatable(data)
cor_data <- cor(data[,c("GRE.Score", "TOEFL.Score", "University.Rating", "SOP", "LOR", "CGPA", "Research", "Chance.of.Admit")])
print(cor_data)
ggplot(data, aes(x = GRE.Score, y = Chance.of.Admit)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
ggtitle("GRE Score vs Chance of Admit") +
xlab("GRE Score") +
ylab("Chance of Admit")
ggplot(data, aes(x = factor(Research), y = Chance.of.Admit)) +
geom_bar(stat = "summary", fun = "mean", fill = "steelblue") +
ggtitle("Research Experience vs Chance of Admit") +
xlab("Research Experience (1 = Yes, 0 = No)") +
ylab("Average Chance of Admit")
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research, data = data)
summary(model)
research_data <- data.frame(
Research = c(sum(data$Research == 1), sum(data$Research == 0)),
Category = c("Research", "No Research")
)
ggplot(research_data, aes(x = "", y = Research, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
ggtitle("Distribution of Research Experience") +
theme(legend.title = element_blank())
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(DT)
library(Metrics)
install.packages("Metrics")
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(DT)
library(Metrics)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(DT)
library(Metrics)
predicted_values <- predict(model, data)
mae <- mae(data$Chance.of.Admit, predicted_values)
rmse <- rmse(data$Chance.of.Admit, predicted_values)
rsq <- summary(model)$r.squared
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("R-squared:", rsq, "\n")
ggplot(data, aes(x = factor(University.Rating), y = Chance.of.Admit)) +
geom_bar(stat = "summary", fun = "mean", fill = "orange") +
ggtitle("University Rating vs Chance of Admit") +
xlab("University Rating") +
ylab("Average Chance of Admit")
predicted_values <- predict(data)
ggplot(data, aes(x = Chance.of.Admit, y = predicted_values)) +
geom_point(color = "steelblue") +
geom_abline(slope = 1, intercept = 0, color = "red") +
ggtitle("Predicted vs Actual Chance of Admit") +
xlab("Actual Chance of Admit") +
ylab("Predicted Chance of Admit") +
theme_minimal()
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research, data = data)
predicted_values <- predict(model, data)
ggplot(data, aes(x = Chance.of.Admit, y = predicted_values)) +
geom_point(color = "steelblue") +
geom_abline(slope = 1, intercept = 0, color = "red") +
ggtitle("Predicted vs Actual Chance of Admit") +
xlab("Actual Chance of Admit") +
ylab("Predicted Chance of Admit") +
theme_minimal()
ggplot(data, aes(x = factor(Research), y = Chance.of.Admit)) +
geom_bar(stat = "summary", fun = "mean", fill = "blue") +
ggtitle("Research Experience vs Chance of Admit") +
xlab("Research Experience (1 = Yes, 0 = No)") +
ylab("Average Chance of Admit")
library(readr)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(DT)
library(Metrics)
data <- read.csv("data/Admission_Predict.csv")
head(data)
datatable(data)
research_data <- data.frame(
Research = c(sum(data$Research == 1), sum(data$Research == 0)),
Category = c("Research", "No Research")
)
ggplot(research_data, aes(x = "", y = Research, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
ggtitle("Distribution of Research Experience") +
theme(legend.title = element_blank())
ggplot(data, aes(x = factor(Research), y = Chance.of.Admit)) +
geom_bar(stat = "summary", fun = "mean", fill = "blue") +
ggtitle("Research Experience vs Chance of Admit") +
xlab("Research Experience (1 = Yes, 0 = No)") +
ylab("Average Chance of Admit")
ggplot(data, aes(x = factor(University.Rating), y = Chance.of.Admit)) +
geom_bar(stat = "summary", fun = "mean", fill = "pink") +
ggtitle("University Rating vs Chance of Admit") +
xlab("University Rating") +
ylab("Average Chance of Admit")
model <- lm(Chance.of.Admit ~ GRE.Score + TOEFL.Score + University.Rating + SOP + LOR + CGPA + Research, data = data)
predicted_values <- predict(model, data)
ggplot(data, aes(x = Chance.of.Admit, y = predicted_values)) +
geom_point(color = "steelblue") +
geom_abline(slope = 1, intercept = 0, color = "red") +
ggtitle("Predicted vs Actual Chance of Admit") +
xlab("Actual Chance of Admit") +
ylab("Predicted Chance of Admit") +
theme_minimal()
